generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Package {
  id                     Int    @id @default(autoincrement())
  current_price          String // This is used as "price"
  original_price         String
  discount               String
  subscription_frequency String // "monthly", "quarterly", "half-year", "yearly"
  days                   Int    // Number of days per week
  classes_per_month      Int?   // Optional: classes per month for additional tracking
  class_duration         Int    // This will store duration (30 or 60 minutes)
  is_popular             Boolean @default(false) // Added to track popular packages
  currency               String  @default("USD") // Added to set the currency
  enrollment_action      String
  package_type           String
  
  // New fields for better UI support
  title                  String? // Display name for the package (e.g., "30 Minutes", "60 Minutes")
  description            String? // Package description (e.g., "Comprehensive learning package")
  total_classes          Int?    // Total number of classes in the package
  duration_weeks         Int?    // How many weeks the package lasts
  subject                String? // Subject/topic covered
  level                  String? // Beginner, Intermediate, Advanced
  features               String[] // Array of package features/benefits
  image_url              String? // Package image/icon URL
  is_active              Boolean @default(true) // Whether package is available for purchase
  sort_order             Int?    // For ordering packages in the UI
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now()) @updatedAt
  
  subscriptions          Subscription[]

  @@map("Package")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  birthDate             DateTime?
  gender                Gender?
  isTeacher             Boolean?               @default(false)
  teacherApprovalStatus TeacherApprovalStatus? @default(PENDING)
  teacherApprovedAt     DateTime?
  teacherApprovedBy     String?               // ID of admin who approved
  teacherRejectedReason String?               // Reason for rejection if any
  phone                 String?
  qualifications        String?
  referralSource        String?
  subjects              String?
  teachingExperience    Int?
  hasBookedDemo         Boolean                @default(false)
  demoSessionDate       DateTime?
  
  // Teacher-Student Relations
  assignedTeacherId     String?               // Foreign key for assigned teacher
  assignedTeacher       User?                 @relation("TeacherStudents", fields: [assignedTeacherId], references: [id])
  assignedStudents      User[]                @relation("TeacherStudents")
  
  // Many-to-many relationship for multiple teachers per student (optional)
  teacherConnections    TeacherStudent[]      @relation("StudentConnections")
  studentConnections    TeacherStudent[]      @relation("TeacherConnections")
  
  // Original relationships
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions         Subscription[]
  freeSessionBookings   FreeSessionBooking[]  @relation("StudentBookings")
  teacherBookings       FreeSessionBooking[]  @relation("TeacherBookings")
  
  // Class session relationships
  studentClasses        ClassSession[]        @relation("StudentClasses")
  teacherClasses        ClassSession[]        @relation("TeacherClasses")
  teacherEarnings       TeacherEarnings[]     @relation("TeacherEarnings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  packageId         Int
  startDate         DateTime @default(now())
  endDate           DateTime?
  status            SubscriptionStatus @default(ACTIVE)
  
  // New fields for better tracking
  classes_completed Int      @default(0) // Number of classes completed
  classes_remaining Int?     // Calculated or stored remaining classes
  next_class_date   DateTime? // Next scheduled class
  auto_renew        Boolean  @default(false) // Auto-renewal setting
  payment_method    String?  // Payment method used
  stripe_session_id String?  // Stripe session ID for reference
  cancellation_reason String? // Reason for cancellation (if cancelled)
  notes             String?  // Admin notes about the subscription
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  package           Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  classSessions     ClassSession[]

  @@unique([userId, packageId])
}

model TeacherStudent {
  id            String   @id @default(cuid())
  teacherId     String
  studentId     String
  assignedAt    DateTime @default(now())
  isActive      Boolean  @default(true)
  notes         String?  // Optional notes about the teacher-student relationship
  zoomLink      String?  // Zoom meeting link for teacher-student sessions
  
  // Relations
  teacher       User     @relation("TeacherConnections", fields: [teacherId], references: [id], onDelete: Cascade)
  student       User     @relation("StudentConnections", fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([teacherId, studentId])
  @@map("teacher_students")
}

model FreeSessionBooking {
  id                String               @id @default(cuid())
  studentId         String
  teacherId         String?              // Can be null initially, assigned later
  sessionDate       DateTime
  duration          Int                  @default(30) // Duration in minutes
  status            FreeSessionStatus    @default(PENDING)
  subject           String?              // Subject for the session (Quran, Arabic, etc.)
  studentNotes      String?              // Notes from student about their goals/needs
  teacherNotes      String?              // Notes from teacher after the session
  meetingLink       String?              // Online meeting link
  timezone          String?              // Student's timezone
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  completedAt       DateTime?            // When the session was completed
  cancelledAt       DateTime?            // When the session was cancelled
  cancellationReason String?             // Reason for cancellation
  
  // Relations
  student           User                 @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  teacher           User?                @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: SetNull)
  
  @@map("free_session_bookings")
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}

enum Gender {
  MALE
  FEMALE
}

enum TeacherApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum FreeSessionStatus {
  PENDING      // Waiting for teacher assignment
  SCHEDULED    // Teacher assigned and confirmed
  COMPLETED    // Session completed
  CANCELLED    // Session cancelled
  NO_SHOW      // Student didn't show up
}

enum ClassStatus {
  SCHEDULED    // Class is scheduled
  IN_PROGRESS  // Class is currently in progress
  COMPLETED    // Class has been completed
  CANCELLED    // Class was cancelled
  NO_SHOW      // Student didn't show up
}

model ClassSession {
  id                String           @id @default(cuid())
  studentId         String
  teacherId         String
  subscriptionId    String
  startTime         DateTime
  endTime           DateTime?
  duration          Int              @default(30) // Duration in minutes
  zoomLink          String?          // Zoom meeting link
  status            ClassStatus      @default(SCHEDULED)
  teacherEarning    Float            @default(2.0) // Teacher earning for this class
  notes             String?          // General teacher notes about the class
  
  // Structured notes for different aspects of learning
  dailyAssignment   String?          // الواجب اليومي - Daily Assignment notes
  appliedTajweed    String?          // التجويد التطبيقي - Applied Tajweed notes  
  review            String?          // المراجعة - Review notes
  memorization      String?          // حفظ - Memorization notes
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  student           User             @relation("StudentClasses", fields: [studentId], references: [id], onDelete: Cascade)
  teacher           User             @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  subscription      Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("class_sessions")
}

model TeacherEarnings {
  id                String           @id @default(cuid())
  teacherId         String
  totalEarnings     Float            @default(0.0)
  totalClasses      Int              @default(0)
  currentMonth      Int              // 1-12 for tracking monthly earnings
  currentYear       Int              // Year for tracking annual earnings
  lastUpdated       DateTime         @default(now()) @updatedAt
  
  // Relations
  teacher           User             @relation("TeacherEarnings", fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@unique([teacherId, currentMonth, currentYear])
  @@map("teacher_earnings")
}
