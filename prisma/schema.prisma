generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Package {
  id                     Int    @id @default(autoincrement())
  package_id             Int    @unique  // Added to match expected response format
  current_price          String // This is used as "price"
  original_price         String
  discount               String
  subscription_frequency String // "monthly", "quarterly", "half-year", "yearly"
  days                   Int    // Added to store the number of days per week
  class_duration         Int    // This will store duration (30 or 60 minutes)
  is_popular             Boolean @default(false) // Added to track popular packages
  currency               String  @default("USD") // Added to set the currency
  enrollment_action      String
  package_type           String
  subscriptions          Subscription[]

  @@map("Package")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  birthDate             DateTime?
  gender                Gender?
  isTeacher             Boolean?               @default(false)
  phone                 String?
  qualifications        String?
  referralSource        String?
  subjects              String?
  teachingExperience    Int?
  hasBookedDemo         Boolean                @default(false)
  demoSessionDate       DateTime?
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions         Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  packageId     Int
  startDate     DateTime @default(now())
  endDate       DateTime?
  status        SubscriptionStatus @default(ACTIVE)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  package       Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([userId, packageId])
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}

enum Gender {
  MALE
  FEMALE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}
