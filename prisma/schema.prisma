datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Package {
  id                     Int    @id @default(autoincrement())
  current_price          String
  original_price         String
  discount               String
  subscription_frequency String
  days_per_week          String
  classes_per_month      String
  class_duration         String
  enrollment_action      String
  package_type           String

  @@map("Package")  // Explicitly map to the "Package" table
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}
 enum Gender {
  MALE
  FEMALE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
   // Common fields
  phone                 String?                // Phone number
  gender                Gender?                // Gender (enum)
  birthDate             DateTime?              // Birth date
  referralSource        String?                // How did they hear about you
    // Teacher-specific fields (Optional)
  isTeacher             Boolean?               @default(false) // Mark if the user is a teacher
  qualifications        String?                // Teacher's qualifications
  subjects              String?                // Subjects taught by the teacher
  teachingExperience    Int?                   // Number of years of teaching experience
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
